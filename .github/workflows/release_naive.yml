name: Na誰veProxy Plugin Release Build
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag'
        required: true
      upload:
        description: 'Upload: If want ignore'
        required: false
#      publish:
#        description: 'Publish: If want ignore'
#        required: false
jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: "Check access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  naive_libs:
    needs: check
    runs-on: ubuntu-latest
    name: Native Build (Na誰veProxy)
    strategy:
      fail-fast: false
      matrix:
        arch: [ armeabi-v7a, arm64-v8a, x86, x86_64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status 'plugin/naive/*' > naive_status
      - name: Naive Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            plugin/naive/src/main/jniLibs/${{ matrix.arch }}
          key: naive-${{ matrix.arch }}-${{ hashFiles('bin/plugin/naive/*', 'naive_status') }}
      - name: Gradle cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ~/.gradle
          key: native-${{ hashFiles('**/*.gradle') }}
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
          ./run init action naive
          ./run plugin naive ${{ matrix.arch }}
  naive:
    needs: naive_libs
    name: Gradle Build (Na誰veProxy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status 'plugin/naive/*' > naive_status
      - name: Naive Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            plugin/naive/src/main/jniLibs/armeabi-v7a
          key: naive-armeabi-v7a-${{ hashFiles('bin/plugin/naive/*', 'naive_status') }}
      - name: Naive Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            plugin/naive/src/main/jniLibs/arm64-v8a
          key: naive-arm64-v8a-${{ hashFiles('bin/plugin/naive/*', 'naive_status') }}
      - name: Naive Cache (x86)
        uses: actions/cache@v2
        with:
          path: |
            plugin/naive/src/main/jniLibs/x86
          key: naive-x86-${{ hashFiles('bin/plugin/naive/*', 'naive_status') }}
      - name: Naive Cache (x86_64)
        uses: actions/cache@v2
        with:
          path: |
            plugin/naive/src/main/jniLibs/x86_64
          key: naive-x86_64-${{ hashFiles('bin/plugin/naive/*', 'naive_status') }}
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: native-${{ hashFiles('**/*.gradle') }}
      - name: Native Build
        run: |
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          ./gradlew naive-plugin:assembleRelease
          APK=$(find plugin/naive/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          echo "APK=$APK" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: Na誰veProxy
          path: ${{ env.APK }}
  publish:
    name: Publish Release
    if: github.event.inputs.publish != 'y'
    runs-on: ubuntu-latest
    needs: naive
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Release
        run: |
          wget -O ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
          tar -xvf ghr.tar.gz
          mv ghr*linux_amd64/ghr .
          mkdir apks
          find artifacts -name "*.apk" -exec cp {} apks \;
          ./ghr -delete -t "${{ github.token }}" -n "${{ github.event.inputs.tag }}" "${{ github.event.inputs.tag }}" apks
  upload:
    name: Upload Release
    if: github.event.inputs.upload != 'y'
    runs-on: ubuntu-latest
    needs: naive
    steps:
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Release
        run: |
          mkdir apks
          find artifacts -name "*.apk" -exec cp {} apks \;
          function upload() {
            for apk in $@; do
              echo ">> Uploading $apk"
              curl https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument \
                -X POST \
                -F chat_id="${{ secrets.TELEGRAM_CHANNEL }}" \
                -F document="@$apk" \
                --silent --show-error --fail >/dev/null &
            done
            for job in $(jobs -p); do
              wait $job || exit 1
            done
          }
          upload apks/*.apk
#  play:
#    name: Publish to Play Store
#    if: github.event.inputs.upload != 'y'
#    runs-on: ubuntu-latest
#    needs:
#      - native
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Fetch Status
#        run: git submodule status 'plugin/xtls/*' > xtls_status
#      - name: XTLS Cache
#        uses: actions/cache@v2
#        with:
#          path: |
#            plugin/xtls/src/main/jniLibs
#          key: ${{ hashFiles('bin/lib/xtls.sh', 'xtls_status') }}
#      - name: Release Build
#        run: |
#          echo "sdk.dir=${ANDROID_HOME}" > local.properties
#          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
#          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
#          cat > service_account_credentials.json << EOF
#          ${{ secrets.ANDROID_PUBLISHER_CREDENTIALS }}"
#          EOF
#          ./gradlew xtls-plugin:publishRelease